# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Assume you have your data in a Python dictionary
data_dict = {
    'feature1': [1, 2, 3, 4, 5],
    'feature2': [2, 3, 4, 5, 6],
    'sales': [3, 4, 5, 6, 7]
}

# Convert the dictionary to a pandas DataFrame
data = pd.DataFrame(data_dict)

# Preprocessing and Exploratory Data Analysis
# This will depend on your specific dataset
# For example, you might need to handle missing values, convert categorical data to numerical, etc.

# Let's assume 'sales' is the column we want to predict, and all other columns are our features
X = data.drop('sales', axis=1)
y = data['sales']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')

# Plot actual vs predicted values
plt.scatter(y_test, predictions)
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales')
plt.show()
